diff --git a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/loop/SessionLoopImpl.java b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/loop/SessionLoopImpl.java
index 0dd0a01..ce7ed40 100644
--- a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/loop/SessionLoopImpl.java
+++ b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/loop/SessionLoopImpl.java
@@ -90,7 +90,6 @@ public class SessionLoopImpl implements SessionLoop {
     private ScheduledThreadPoolExecutor pullService;
     private ScheduledThreadPoolExecutor scheduler;
     private ScheduledThreadPoolExecutor persistOffsetScheduler;
-    private SubscriptionPersistManager subscriptionPersistManager;
 
     /**
      * channelId->session
@@ -339,32 +338,6 @@ public class SessionLoopImpl implements SessionLoop {
         if (session == null || session.isDestroyed()) {
             return;
         }
-        if (subscriptionPersistManager == null) {
-            subscriptionPersistManager = SpringUtils.getBean(SubscriptionPersistManager.class);
-        }
-        if (subscriptionPersistManager != null &&
-                !session.isClean() && !session.isLoaded()) {
-            if (session.isLoading()) {
-                return;
-            }
-            session.setLoading();
-            CompletableFuture<Set<Subscription>> future = subscriptionPersistManager.loadSubscriptions(session.getClientId());
-            future.whenComplete((subscriptions, throwable) -> {
-                if (throwable != null) {
-                    logger.error("", throwable);
-                    scheduler.schedule(() -> {
-                        session.resetLoad();
-                        notifyPullMessage(session, subscription, queue);
-                    }, 3, TimeUnit.SECONDS);
-                    return;
-                }
-                session.addSubscription(subscriptions);
-                matchAction.addSubscription(session, subscriptions);
-                session.setLoaded();
-                notifyPullMessage(session, subscription, queue);
-            });
-            return;
-        }
         if (queue != null) {
             if (subscription == null) {
                 throw new RuntimeException(
