diff --git a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/Session.java b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/Session.java
index 3560a36..06e0700 100644
--- a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/Session.java
+++ b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/Session.java
@@ -140,9 +140,11 @@ public class Session {
             if (subscription == null) {
                 continue;
             }
-            Map<Queue, QueueOffset> queueMap = new HashMap<>(offsetMap.get(queueName).size());
+            Map<Queue, QueueOffset> queueMap = new HashMap<>(8);
             tmp.put(subscription, queueMap);
-            queueMap.putAll(offsetMap.get(queueName));
+            for (Map.Entry<Queue, QueueOffset> entry : offsetMap.get(queueName).entrySet()) {
+                queueMap.put(entry.getKey(), entry.getValue());
+            }
         }
         return tmp;
     }
diff --git a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/infly/RetryDriver.java b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/infly/RetryDriver.java
index 4902c46..9b32ce9 100644
--- a/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/infly/RetryDriver.java
+++ b/mqtt-cs/src/main/java/org/apache/rocketmq/mqtt/cs/session/infly/RetryDriver.java
@@ -84,8 +84,6 @@ public class RetryDriver {
 
     private Cache<String, RetryMessage> retryCache;
     private static final int MAX_CACHE = 50000;
-    private int scheduleDelaySecs = 3;
-    private long messageRetryInterval = 3000;
     private Map<String, Map<Integer, RetryMessage>> sessionNoWaitRetryMsgMap = new ConcurrentHashMap<>(16);
     private ScheduledThreadPoolExecutor scheduler = new ScheduledThreadPoolExecutor(2,
             new ThreadFactoryImpl("retry_msg_thread_"));
@@ -101,7 +99,7 @@ public class RetryDriver {
             }
         }).build();
 
-        scheduler.scheduleWithFixedDelay(() -> doRetryCache(), scheduleDelaySecs, connectConf.getRetryIntervalSeconds(), TimeUnit.SECONDS);
+        scheduler.scheduleWithFixedDelay(() -> doRetryCache(), 3, connectConf.getRetryIntervalSeconds(), TimeUnit.SECONDS);
 
         Runtime.getRuntime().addShutdownHook(new Thread(() -> {
             Map<String, RetryMessage> map = retryCache.asMap();
@@ -166,7 +164,7 @@ public class RetryDriver {
                         }
                     }
                 }
-            }, scheduleDelaySecs, TimeUnit.SECONDS);
+            }, 3, TimeUnit.SECONDS);
         });
     }
 
@@ -178,11 +176,11 @@ public class RetryDriver {
                     Message message = retryMessage.message;
                     Session session = retryMessage.session;
                     int mqttMsgId = retryMessage.mqttMsgId;
 
-                    if (System.currentTimeMillis() - retryMessage.timestamp < messageRetryInterval) {
+                    if (System.currentTimeMillis() - retryMessage.timestamp < 3000) {
                         continue;
                     }
 
                     if (MqttMessageType.PUBLISH.equals(retryMessage.mqttMessageType)) {
                         if (session == null || session.isDestroyed()) {
                             cleanRetryMessage(mqttMsgId, session.getChannelId());
