diff --git a/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/DefaultLwM2mNodeEncoder.java b/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/DefaultLwM2mNodeEncoder.java
index 4ba99d1e..e8f5018d 100644
--- a/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/DefaultLwM2mNodeEncoder.java
+++ b/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/DefaultLwM2mNodeEncoder.java
@@ -24,7 +24,6 @@ import org.eclipse.leshan.core.node.LwM2mPath;
 import org.eclipse.leshan.core.node.TimestampedLwM2mNode;
 import org.eclipse.leshan.core.node.codec.json.LwM2mNodeJsonEncoder;
 import org.eclipse.leshan.core.node.codec.opaque.LwM2mNodeOpaqueEncoder;
-import org.eclipse.leshan.core.node.codec.senml.LwM2mNodeSenMLJsonEncoder;
 import org.eclipse.leshan.core.node.codec.text.LwM2mNodeTextEncoder;
 import org.eclipse.leshan.core.node.codec.tlv.LwM2mNodeTlvEncoder;
 import org.eclipse.leshan.core.request.ContentFormat;
@@ -105,9 +104,6 @@ public class DefaultLwM2mNodeEncoder implements LwM2mNodeEncoder {
         case ContentFormat.OLD_JSON_CODE:
             encoded = LwM2mNodeJsonEncoder.encode(node, path, model, converter);
             break;
-        case ContentFormat.SENML_JSON_CODE:
-            encoded = LwM2mNodeSenMLJsonEncoder.encode(node, path, model, converter);
-            break;
         default:
             throw new CodecException("Content format %s is not supported [%s]", format, path);
         }
@@ -149,7 +145,6 @@ public class DefaultLwM2mNodeEncoder implements LwM2mNodeEncoder {
         case ContentFormat.TLV_CODE:
         case ContentFormat.OPAQUE_CODE:
         case ContentFormat.JSON_CODE:
-        case ContentFormat.SENML_JSON_CODE:
             return true;
         case ContentFormat.OLD_TLV_CODE:
         case ContentFormat.OLD_JSON_CODE:
diff --git a/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/senml/LwM2mNodeSenMLJsonEncoder.java b/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/senml/LwM2mNodeSenMLJsonEncoder.java
deleted file mode 100644
index c2f1c276..00000000
--- a/leshan-core/src/main/java/org/eclipse/leshan/core/node/codec/senml/LwM2mNodeSenMLJsonEncoder.java
+++ /dev/null
@@ -1,189 +0,0 @@
-/*******************************************************************************
- * All rights reserved. This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * and Eclipse Distribution License v1.0 which accompany this distribution.
- * 
- * The Eclipse Public License is available at
- *    http://www.eclipse.org/legal/epl-v10.html
- * and the Eclipse Distribution License is available at
- *    http://www.eclipse.org/org/documents/edl-v10.html.
- * 
- * Contributors:
- *     Boya Zhang - initial API and implementation
- *******************************************************************************/
-package org.eclipse.leshan.core.node.codec.senml;
-
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.Map.Entry;
-
-import org.eclipse.leshan.core.model.LwM2mModel;
-import org.eclipse.leshan.core.model.ResourceModel;
-import org.eclipse.leshan.core.model.ResourceModel.Type;
-import org.eclipse.leshan.core.node.LwM2mNode;
-import org.eclipse.leshan.core.node.LwM2mNodeVisitor;
-import org.eclipse.leshan.core.node.LwM2mObject;
-import org.eclipse.leshan.core.node.LwM2mObjectInstance;
-import org.eclipse.leshan.core.node.LwM2mPath;
-import org.eclipse.leshan.core.node.LwM2mResource;
-import org.eclipse.leshan.core.node.codec.CodecException;
-import org.eclipse.leshan.core.node.codec.LwM2mValueConverter;
-import org.eclipse.leshan.core.util.Base64;
-import org.eclipse.leshan.core.util.Validate;
-import org.eclipse.leshan.senml.SenMLJson;
-import org.eclipse.leshan.senml.SenMLPack;
-import org.eclipse.leshan.senml.SenMLRecord;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-public class LwM2mNodeSenMLJsonEncoder {
-    private static final Logger LOG = LoggerFactory.getLogger(LwM2mNodeSenMLJsonEncoder.class);
-
-    public static byte[] encode(LwM2mNode node, LwM2mPath path, LwM2mModel model, LwM2mValueConverter converter) {
-        Validate.notNull(node);
-        Validate.notNull(path);
-        Validate.notNull(model);
-
-        InternalEncoder internalEncoder = new InternalEncoder();
-        internalEncoder.objectId = path.getObjectId();
-        internalEncoder.model = model;
-        internalEncoder.requestPath = path;
-        internalEncoder.converter = converter;
-        node.accept(internalEncoder);
-
-        SenMLPack pack = new SenMLPack();
-        pack.setRecords(internalEncoder.records);
-        return SenMLJson.toJsonSenML(pack).getBytes();
-    }
-
-    private static class InternalEncoder implements LwM2mNodeVisitor {
-        // visitor inputs
-        private int objectId;
-        private LwM2mModel model;
-        private LwM2mPath requestPath;
-        private LwM2mValueConverter converter;
-
-        // visitor output
-        private ArrayList<SenMLRecord> records = new ArrayList<>();
-
-        @Override
-        public void visit(LwM2mObject object) {
-            LOG.trace("Encoding Object {} into SenML JSON", object);
-            // Validate request path
-            if (!requestPath.isObject()) {
-                throw new CodecException("Invalid request path %s for object encoding", requestPath);
-            }
-
-            // Create SenML records
-            for (LwM2mObjectInstance instance : object.getInstances().values()) {
-                for (LwM2mResource resource : instance.getResources().values()) {
-                    String prefixPath = Integer.toString(instance.getId()) + "/" + Integer.toString(resource.getId());
-                    lwM2mResourceToSenMLRecord(prefixPath, resource);
-                }
-            }
-        }
-
-        @Override
-        public void visit(LwM2mObjectInstance instance) {
-            LOG.trace("Encoding object instance {} into SenML JSON", instance);
-            for (LwM2mResource resource : instance.getResources().values()) {
-                // Validate request path & compute resource path
-                String prefixPath;
-                if (requestPath.isObject()) {
-                    prefixPath = instance.getId() + "/" + resource.getId();
-                } else if (requestPath.isObjectInstance()) {
-                    prefixPath = Integer.toString(resource.getId());
-                } else {
-                    throw new CodecException("Invalid request path %s for instance encoding", requestPath);
-                }
-                // Create SenML records
-                lwM2mResourceToSenMLRecord(prefixPath, resource);
-            }
-        }
-
-        @Override
-        public void visit(LwM2mResource resource) {
-            LOG.trace("Encoding resource {} into SenML JSON", resource);
-            if (!requestPath.isResource()) {
-                throw new CodecException("Invalid request path %s for resource encoding", requestPath);
-            }
-
-            // Using request path as base name, and record doesn't have name
-            lwM2mResourceToSenMLRecord(null, resource);
-        }
-
-        private void lwM2mResourceToSenMLRecord(String recordName, LwM2mResource resource) {
-            // create resource element
-            if (resource.isMultiInstances()) {
-                for (Entry<Integer, ?> entry : resource.getValues().entrySet()) {
-                    // compute record name for resource instance
-                    String resourceInstanceRecordName;
-                    if (recordName == null || recordName.isEmpty()) {
-                        resourceInstanceRecordName = Integer.toString(entry.getKey());
-                    } else {
-                        resourceInstanceRecordName = recordName + "/" + entry.getKey();
-                    }
-
-                    addSenMLRecord(resourceInstanceRecordName, resource, entry.getValue());
-                }
-            } else {
-                addSenMLRecord(recordName, resource, resource.getValue());
-            }
-        }
-
-        private void addSenMLRecord(String recordName, LwM2mResource resource, Object value) {
-            // get type for this resource
-            ResourceModel rSpec = model.getResourceModel(objectId, resource.getId());
-            Type expectedType = rSpec != null ? rSpec.type : resource.getType();
-
-            // Create SenML record
-            SenMLRecord record = new SenMLRecord();
-
-            // Compute baseName and name for SenML record
-            String bn = requestPath.toString();
-            String n = recordName == null ? "" : recordName;
-
-            if (records.isEmpty()) {
-                if (!n.isEmpty()) {
-                    bn += "/";
-                }
-                record.setBaseName(bn);
-            }
-            record.setName(n);
-
-            // Convert value using expected type
-            LwM2mPath lwM2mResourcePath = new LwM2mPath(bn + n);
-            Object convertedValue = converter.convertValue(value, resource.getType(), expectedType, lwM2mResourcePath);
-            setResourceValue(convertedValue, expectedType, lwM2mResourcePath, record);
-
-            // Add record to the List
-            records.add(record);
-        }
-
-        private void setResourceValue(Object value, Type type, LwM2mPath resourcePath, SenMLRecord record) {
-            LOG.trace("Encoding resource value {} in SenML JSON", value);
-            switch (type) {
-            case STRING:
-                record.setStringValue((String) value);
-                break;
-            case INTEGER:
-            case FLOAT:
-                record.setFloatValue((Number) value);
-                break;
-            case BOOLEAN:
-                record.setBooleanValue((Boolean) value);
-                break;
-            case TIME:
-                record.setFloatValue((((Date) value).getTime() / 1000L));
-                break;
-            case OPAQUE:
-                record.setStringValue(Base64.encodeBase64String((byte[]) value));
-                break;
-            case OBJLNK:
-                record.setStringValue(value.toString());
-            default:
-                throw new CodecException("Invalid value type %s for %s", type, resourcePath);
-            }
-        }
-    }
-}
\ No newline at end of file
