diff --git a/leshan-core/src/test/java/org/eclipse/leshan/core/datatype/NumberUtilTest.java b/leshan-core/src/test/java/org/eclipse/leshan/core/datatype/NumberUtilTest.java
index 4dd2e859..73a1809e 100644
--- a/leshan-core/src/test/java/org/eclipse/leshan/core/datatype/NumberUtilTest.java
+++ b/leshan-core/src/test/java/org/eclipse/leshan/core/datatype/NumberUtilTest.java
@@ -18,7 +18,6 @@ package org.eclipse.leshan.core.datatype;
 import static org.eclipse.leshan.core.util.datatype.NumberUtil.*;
 import static org.junit.Assert.assertEquals;
 
-import java.math.BigDecimal;
 import java.math.BigInteger;
 
 import org.eclipse.leshan.core.util.datatype.ULong;
@@ -45,16 +44,6 @@ public class NumberUtilTest {
 
         assertEquals(Long.valueOf(0l), numberToLong(ULong.valueOf("0")));
         assertEquals(Long.valueOf(9223372036854775807l), numberToLong(ULong.valueOf("9223372036854775807")));
-
-        // floating point
-        assertEquals(Long.valueOf(-9223371487098961920l), numberToLong(Float.valueOf("-9223371487098961920")));
-        assertEquals(Long.valueOf(9223371487098961920l), numberToLong(Float.valueOf("9223371487098961920")));
-
-        assertEquals(Long.valueOf(-9223372036854775808l), numberToLong(Double.valueOf("-9223372036854775808")));
-        assertEquals(Long.valueOf(9223372036854774784l), numberToLong(Double.valueOf("9223372036854774800")));
-
-        assertEquals(Long.valueOf(-9223372036854775808l), numberToLong(new BigDecimal("-9223372036854775808")));
-        assertEquals(Long.valueOf(9223372036854775807l), numberToLong(new BigDecimal("9223372036854775807")));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -72,51 +61,6 @@ public class NumberUtilTest {
         numberToLong(ULong.valueOf("9223372036854775808"));
     }
 
-    @Test(expected = IllegalStateException.class)
-    public void float_too_small_for_long() {
-        numberToLong(Float.valueOf("-9223373136366403584"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void float_too_big_for_long() {
-        numberToLong(Float.valueOf("9223372036854775808"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void float_with_decimal_for_long() {
-        numberToLong(Float.valueOf(30.50f));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void double_too_small_for_long() {
-        numberToLong(Double.valueOf("-9223373136366403584"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void double_too_big_for_long() {
-        numberToLong(Double.valueOf("9223372036854775808"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void double_with_decimal() {
-        numberToLong(Double.valueOf(30.50d));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void bigdecimal_too_small_for_long() {
-        numberToLong(new BigDecimal("-9223372036854775809"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void bigdecimal_too_big_for_long() {
-        numberToLong(new BigDecimal("9223372036854775808"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void bigdecimal_with_decimal_for_long() {
-        numberToLong(new BigDecimal(30.50f));
-    }
-
     @Test
     public void convert_number_to_ulong() {
         assertEquals(ULong.valueOf("0"), numberToULong(Byte.valueOf("0")));
@@ -136,16 +80,6 @@ public class NumberUtilTest {
 
         assertEquals(ULong.valueOf("0"), numberToULong(ULong.valueOf("0")));
         assertEquals(ULong.valueOf("18446744073709551615"), numberToULong(ULong.valueOf("18446744073709551615")));
-
-        // floating point
-        assertEquals(ULong.valueOf("0"), numberToULong(Float.valueOf("0")));
-        assertEquals(ULong.valueOf("18446742974197923840"), numberToULong(Float.valueOf("18446742974197923840")));
-
-        assertEquals(ULong.valueOf("0"), numberToULong(Double.valueOf("0")));
-        assertEquals(ULong.valueOf("18446742974197923840"), numberToULong(Double.valueOf("18446742974197923840")));
-
-        assertEquals(ULong.valueOf("0"), numberToULong(new BigDecimal("0")));
-        assertEquals(ULong.valueOf("18446744073709551615"), numberToULong(new BigDecimal("18446744073709551615")));
     }
 
     @Test(expected = IllegalStateException.class)
@@ -173,43 +107,8 @@ public class NumberUtilTest {
         numberToULong(new BigInteger("-1"));
     }
 
-    @Test(expected = IllegalStateException.class)
-    public void float_negative_for_ulong() {
-        numberToULong(Float.valueOf("-1"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void double_negative_for_ulong() {
-        numberToULong(Double.valueOf("-1"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void bigdecimal_negative_for_ulong() {
-        numberToULong(new BigDecimal("-1"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void float_with_decimal_for_ulong() {
-        numberToULong(Float.valueOf(30.50f));
-    }
-
     @Test(expected = IllegalStateException.class)
     public void biginteger_to_big_for_ulong() {
-        numberToULong(new BigInteger("18446744073709551616"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void float_too_big_for_ulong() {
-        numberToULong(Float.valueOf("18446744073709551616"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void double_too_big_for_ulong() {
-        numberToULong(Double.valueOf("18446744073709551616"));
-    }
-
-    @Test(expected = IllegalStateException.class)
-    public void bigdecimal_to_big_for_ulong() {
-        numberToULong(new BigDecimal("18446744073709551616"));
+        numberToLong(new BigInteger("18446744073709551616"));
     }
 }
