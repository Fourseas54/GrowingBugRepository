diff --git a/src/test/java/com/jcabi/http/request/FakeRequestTest.java b/src/test/java/com/jcabi/http/request/FakeRequestTest.java
index 11c316b..b8fc332 100644
--- a/src/test/java/com/jcabi/http/request/FakeRequestTest.java
+++ b/src/test/java/com/jcabi/http/request/FakeRequestTest.java
@@ -96,6 +96,21 @@ public final class FakeRequestTest {
         );
     }
 
+    /**
+     * FakeRequest can send HTTP requests using InputStream.
+     * @throws Exception If something goes wrong inside
+     */
+    @Test
+    public void sendsHttpRequestUsingInputStream() throws Exception {
+        final String body = "hello";
+        new FakeRequest()
+            .uri().path("/hellostream").back()
+            .method(Request.POST)
+            .fetch(new ByteArrayInputStream(body.getBytes(CharEncoding.UTF_8)))
+            .as(RestResponse.class)
+            .assertBody(Matchers.is(body));
+    }
+
     /**
      * FakeRequest.fetch(InputStream) throws an exception if a non-empty body
      * has been previously set.
@@ -120,16 +135,16 @@ public final class FakeRequestTest {
     public void fakeRequestReturnsResponseBody() throws Exception {
         final String response = "the response body";
         final String request = "the request body";
-        new FakeRequest().withBody(response)
-            .body().set(request).back()
-            .fetch()
-            .as(RestResponse.class)
-            .assertBody(
-                Matchers.allOf(
-                    Matchers.is(response),
-                    Matchers.not(Matchers.is(request))
-                )
-            );
+        MatcherAssert.assertThat(
+            new FakeRequest()
+                .withBody(response)
+                .body().set(request).back()
+                .fetch().body(),
+            Matchers.allOf(
+                Matchers.is(response),
+                Matchers.not(Matchers.is(request))
+            )
+        );
     }
 
 }
