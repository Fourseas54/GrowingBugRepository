diff --git a/src/test/java/com/jcabi/http/mock/MkContainerTest.java b/src/test/java/com/jcabi/http/mock/MkContainerTest.java
index 4a1dcc5..08676b9 100644
--- a/src/test/java/com/jcabi/http/mock/MkContainerTest.java
+++ b/src/test/java/com/jcabi/http/mock/MkContainerTest.java
@@ -35,7 +35,6 @@ import com.jcabi.http.response.RestResponse;
 import com.jcabi.http.wire.VerboseWire;
 import java.net.HttpURLConnection;
 import java.util.NoSuchElementException;
-import javax.ws.rs.HttpMethod;
 import javax.ws.rs.core.MediaType;
 import org.hamcrest.MatcherAssert;
 import org.hamcrest.Matchers;
@@ -185,81 +184,4 @@ public final class MkContainerTest {
             );
         container.stop();
     }
-
-    /**
-     * MkContainer can return the query that matched a certain response.
-     * @throws Exception If something goes wrong inside
-     */
-    @Test
-    public void takesMatchingQuery() throws Exception {
-        final String request = "reqBodyMatches";
-        final String response = "respBodyMatches";
-        final MkContainer container = new MkGrizzlyContainer()
-            .next(new MkAnswer.Simple(response))
-            .next(new MkAnswer.Simple("bleh"))
-            .start();
-        new JdkRequest(container.home())
-            .through(VerboseWire.class)
-            .method(HttpMethod.POST)
-            .body().set(request).back()
-            .fetch().as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_OK);
-        new JdkRequest(container.home())
-            .through(VerboseWire.class)
-            .method(HttpMethod.POST)
-            .body().set("reqBodyMismatches").back()
-            .fetch().as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_OK);
-        MatcherAssert.assertThat(
-            container.take(MkAnswerMatchers.hasBody(Matchers.is(response))),
-            MkQueryMatchers.hasBody(Matchers.is(request))
-        );
-        container.stop();
-    }
-
-    /**
-     * MkContainer can return all queries that matched a certain response.
-     * @throws Exception If something goes wrong inside
-     */
-    @Test
-    public void takesAllMatchingQueries() throws Exception {
-        final String match = "multipleRequestMatches";
-        final String mismatch = "multipleRequestNotMatching";
-        final String response = "multipleResponseMatches";
-        final MkContainer container = new MkGrizzlyContainer().next(
-            new MkAnswer.Simple(response),
-            MkQueryMatchers.hasBody(Matchers.is(match)),
-            2
-        ).next(new MkAnswer.Simple("blaa")).start();
-        new JdkRequest(container.home())
-            .through(VerboseWire.class)
-            .method(HttpMethod.POST)
-            .body().set(match).back()
-            .fetch().as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_OK)
-            .back()
-            .fetch().as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_OK);
-        new JdkRequest(container.home())
-            .through(VerboseWire.class)
-            .method(HttpMethod.POST)
-            .body().set(mismatch).back()
-            .fetch().as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_OK);
-        MatcherAssert.assertThat(
-            container.takeAll(MkAnswerMatchers.hasBody(Matchers.is(response))),
-            Matchers.allOf(
-                Matchers.<MkQuery>iterableWithSize(2),
-                Matchers.hasItem(
-                    MkQueryMatchers.hasBody(Matchers.is(match))
-                ),
-                Matchers.not(
-                    Matchers.hasItem(
-                        MkQueryMatchers.hasBody(Matchers.is(mismatch))
-                    )
-                )
-            )
-        );
-        container.stop();
-    }
 }
