diff --git a/src/main/java/org/locationtech/proj4j/proj/Projection.java b/src/main/java/org/locationtech/proj4j/proj/Projection.java
index 22bbbb9..b12d797 100644
--- a/src/main/java/org/locationtech/proj4j/proj/Projection.java
+++ b/src/main/java/org/locationtech/proj4j/proj/Projection.java
@@ -104,6 +104,7 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
      */
     protected double falseNorthing = 0;
 
+    protected boolean isSouth = false;
     /**
      * The latitude of true scale. Only used by specific projections.
      */
@@ -189,6 +190,7 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
      * northing, vertical (up)
      */
     private AxisOrder axes = AxisOrder.ENU;
+    protected double heightOfOrbit = 35785831.0;
 
     // Some useful constants
     protected final static double EPS10 = 1e-10;
@@ -695,12 +697,10 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
     }
 
     public void setSouthernHemisphere(boolean isSouth) {
-        throw new NoSuchElementException();
+        this.isSouth = isSouth;
     }
 
-    public boolean getSouthernHemisphere() {
-        throw new NoSuchElementException();
-    }
+    public boolean getSouthernHemisphere() { return isSouth; }
 
     /**
      * Set the projection scale factor. This is set to 1 by default.
@@ -767,7 +767,7 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
      * @return Height of orbit
      */
     public double getHeightOfOrbit(){
-        throw new NoSuchElementException();
+        return this.heightOfOrbit;
     }
 
     /**
@@ -775,7 +775,7 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
      * @param h Height of orbit
      */
     public void setHeightOfOrbit(double h){
-        throw new NoSuchElementException();
+        this.heightOfOrbit = h;
     }
 
     /**
@@ -820,35 +820,6 @@ public abstract class Projection implements Cloneable, java.io.Serializable {
         return false;
     }
 
-    @Override
-    public boolean equals(Object that) {
-        if (this == that) {
-            return true;
-        }
-        if (that instanceof Projection) {
-            Projection p = (Projection) that;
             // Using Double.compare when values can be NaN and should still be equal
-            return (
                 // class represents implementation of project method
-                this.getClass().equals(that.getClass()) &&
-                ellipsoid.isEqual(p.ellipsoid) &&
-                falseNorthing == p.falseNorthing &&
-                falseEasting == p.falseEasting &&
-                scaleFactor == p.scaleFactor &&
-                fromMetres == p.fromMetres &&
-                trueScaleLatitude == p.trueScaleLatitude &&
-                projectionLatitude == p.projectionLatitude &&
-                projectionLongitude == p.projectionLongitude &&
-                projectionLatitude1 == p.projectionLatitude1 &&
-                projectionLatitude2 == p.projectionLatitude2 &&
-                minLatitude == p.minLatitude &&
-                maxLatitude == p.maxLatitude &&
-                minLongitude == p.minLongitude &&
-                maxLongitude == p.maxLongitude &&
-                axes.equals(p.axes) &&
-                unit.equals(p.unit) &&
-                primeMeridian.equals(p.primeMeridian));
-        }
-        return false;
-    }
 }
diff --git a/src/main/java/org/locationtech/proj4j/proj/StereographicAzimuthalProjection.java b/src/main/java/org/locationtech/proj4j/proj/StereographicAzimuthalProjection.java
index 2837a5d..e685294 100644
--- a/src/main/java/org/locationtech/proj4j/proj/StereographicAzimuthalProjection.java
+++ b/src/main/java/org/locationtech/proj4j/proj/StereographicAzimuthalProjection.java
@@ -266,4 +266,4 @@ public class StereographicAzimuthalProjection extends AzimuthalProjection {
 	public String toString() {
 		return "Stereographic Azimuthal";
 	}
-}
\ No newline at end of file
+}
