diff --git a/src/main/java/com/jcabi/github/Repo.java b/src/main/java/com/jcabi/github/Repo.java
index f00e4ff9..9ac14f5c 100644
--- a/src/main/java/com/jcabi/github/Repo.java
+++ b/src/main/java/com/jcabi/github/Repo.java
@@ -45,7 +45,7 @@ import lombok.ToString;
  */
 @Immutable
 @SuppressWarnings("PMD.TooManyMethods")
-public interface Repo extends JsonReadable, JsonPatchable, Comparable<Repo> {
+public interface Repo extends JsonReadable, JsonPatchable {
 
     /**
      * Get its owner.
@@ -300,10 +300,6 @@ public interface Repo extends JsonReadable, JsonPatchable, Comparable<Repo> {
             return this.repo.json();
         }
 
-        @Override
-        public int compareTo(final Repo repos) {
-            return this.repo.compareTo(repos);
-        }
     }
 
 }
diff --git a/src/main/java/com/jcabi/github/RtCollaborators.java b/src/main/java/com/jcabi/github/RtCollaborators.java
index bbead80b..90df5b55 100644
--- a/src/main/java/com/jcabi/github/RtCollaborators.java
+++ b/src/main/java/com/jcabi/github/RtCollaborators.java
@@ -97,19 +97,8 @@ final class RtCollaborators implements Collaborators {
 
     @Override
     public boolean isCollaborator(
-        @NotNull(message = "User is never null") final String user)
-        throws IOException {
-        return this.request
-            .method(Request.GET)
-            .uri().path(user).back()
-            .fetch()
-            .as(RestResponse.class)
-            .assertStatus(
-                Matchers.isOneOf(
-                    HttpURLConnection.HTTP_NO_CONTENT,
-                    HttpURLConnection.HTTP_NOT_FOUND
-                )
-            ).status() == HttpURLConnection.HTTP_NO_CONTENT;
+        @NotNull(message = "User is never null") final String user) {
+        throw new UnsupportedOperationException();
     }
 
     @Override
@@ -121,13 +110,8 @@ final class RtCollaborators implements Collaborators {
     @Override
     public void remove(
         @NotNull(message = "user is never NULL") final String user
-    )
-        throws IOException {
-        this.request.method(Request.DELETE)
-            .uri().path(user).back()
-            .fetch()
-            .as(RestResponse.class)
-            .assertStatus(HttpURLConnection.HTTP_NO_CONTENT);
+    ) {
+        throw new UnsupportedOperationException();
     }
 
     @Override
diff --git a/src/main/java/com/jcabi/github/RtRepo.java b/src/main/java/com/jcabi/github/RtRepo.java
index 526c3371..d180a92c 100644
--- a/src/main/java/com/jcabi/github/RtRepo.java
+++ b/src/main/java/com/jcabi/github/RtRepo.java
@@ -216,8 +216,4 @@ final class RtRepo implements Repo {
         return new RtJson(this.request).fetch();
     }
 
-    @Override
-    public int compareTo(final Repo repo) {
-        return this.coords.compareTo(repo.coordinates());
-    }
 }
diff --git a/src/main/java/com/jcabi/github/mock/MkContent.java b/src/main/java/com/jcabi/github/mock/MkContent.java
index 8a9d5446..80da920d 100644
--- a/src/main/java/com/jcabi/github/mock/MkContent.java
+++ b/src/main/java/com/jcabi/github/mock/MkContent.java
@@ -57,7 +57,7 @@ import org.apache.commons.lang3.builder.CompareToBuilder;
 @Immutable
 @Loggable(Loggable.DEBUG)
 @ToString
-@EqualsAndHashCode(of = { "storage", "self", "coords", "location", "branch" })
+@EqualsAndHashCode(of = { "storage", "self", "coords", "location" })
 final class MkContent implements Content {
 
     /**
@@ -83,7 +83,6 @@ final class MkContent implements Content {
     /**
      * Branch of this content.
      */
-    private final transient String branch;
 
     /**
      * Public ctor.
@@ -99,14 +98,12 @@ final class MkContent implements Content {
         @NotNull(message = "stg can't be NULL") final MkStorage stg,
         @NotNull(message = "login can't be NULL") final String login,
         @NotNull(message = "rep can't be NULL") final Coordinates rep,
-        @NotNull(message = "path can't be NULL") final String path,
-        @NotNull(message = "ref can't be NULL") final String ref
+        @NotNull(message = "path can't be NULL") final String path
     ) throws IOException {
         this.storage = stg;
         this.self = login;
         this.coords = rep;
         this.location = path;
-        this.branch = ref;
     }
 
     @Override
@@ -166,8 +163,8 @@ final class MkContent implements Content {
     private String xpath() {
         return String.format(
             // @checkstyle LineLength (1 line)
-            "/github/repos/repo[@coords='%s']/contents/content[path='%s' and @ref='%s']",
-            this.coords, this.location, this.branch
+            "/github/repos/repo[@coords='%s']/contents/content[path='%s']",
+            this.coords, this.location
         );
     }
 }
diff --git a/src/main/java/com/jcabi/github/mock/MkContents.java b/src/main/java/com/jcabi/github/mock/MkContents.java
index 919a7ffb..1aee4c7e 100644
--- a/src/main/java/com/jcabi/github/mock/MkContents.java
+++ b/src/main/java/com/jcabi/github/mock/MkContents.java
@@ -106,7 +106,7 @@ final class MkContents implements Contents {
     public Content readme() throws IOException {
         // @checkstyle MultipleStringLiterals (2 lines)
         return new MkContent(
-            this.storage, this.self, this.coords, "README.md", "master"
+            this.storage, this.self, this.coords, "README.md"
         );
     }
 
@@ -114,7 +114,7 @@ final class MkContents implements Contents {
     @NotNull(message = "the content is never NULL")
     public Content readme(final String branch) throws IOException {
         return new MkContent(
-            this.storage, this.self, this.coords, "README.md", branch
+            this.storage, this.self, this.coords, branch
         );
     }
 
@@ -125,16 +125,9 @@ final class MkContents implements Contents {
     ) throws IOException {
         this.storage.lock();
         // @checkstyle MultipleStringLiterals (20 lines)
-        final String branch;
         try {
-            if (json.containsKey("ref")) {
-                branch = json.getString("ref");
-            } else {
-                branch = "master";
-            }
             this.storage.apply(
                 new Directives().xpath(this.xpath()).add("content")
-                    .attr("ref", branch)
                     .add("name").set(json.getString("path")).up()
                     .add("path").set(json.getString("path")).up()
                     .add("content").set(json.getString("content")).up()
@@ -150,7 +143,7 @@ final class MkContents implements Contents {
             this.storage.unlock();
         }
         return new MkContent(
-            this.storage, this.self, this.coords, json.getString("path"), branch
+            this.storage, this.self, this.coords, json.getString("path")
         );
     }
 
@@ -160,7 +153,7 @@ final class MkContents implements Contents {
         @NotNull(message = "path can't be NULL") final String path,
         @NotNull(message = "ref can't be NULL") final String ref
     ) throws IOException {
-        return new MkContent(this.storage, this.self, this.coords, path, ref);
+        return new MkContent(this.storage, this.self, this.coords, path);
     }
 
     @Override
diff --git a/src/main/java/com/jcabi/github/mock/MkOrganizations.java b/src/main/java/com/jcabi/github/mock/MkOrganizations.java
index 7fb60e5b..90372a39 100644
--- a/src/main/java/com/jcabi/github/mock/MkOrganizations.java
+++ b/src/main/java/com/jcabi/github/mock/MkOrganizations.java
@@ -117,6 +117,12 @@ final class MkOrganizations implements Organizations {
         @NotNull(message = "login is never NULl") final String login
     ) {
         try {
+            this.storage.apply(
+                new Directives().xpath(this.xpath())
+                    .add("org")
+                    .add("id")
+                    .set(Integer.toString(RAND.nextInt()))
+            );
             this.storage.apply(
                 new Directives().xpath(
                     String.format("/github/orgs[not(org[login='%s'])]", login)
@@ -138,8 +144,6 @@ final class MkOrganizations implements Organizations {
             @Override
             public JsonObject json() {
                 return Json.createObjectBuilder()
-                    .add("login", login)
-                    .add("id", Integer.toString(RAND.nextInt()))
                     .add("name", "github")
                     .add("company", "GitHub")
                     .add("blog", "https://github.com/blog")
@@ -147,14 +151,9 @@ final class MkOrganizations implements Organizations {
                     .add("email", "octocat@github.com")
                     .add("public_repos", MkOrganizations.RAND.nextInt())
                     .add("public_gists", MkOrganizations.RAND.nextInt())
-                    .add("total_private_repos", MkOrganizations.RAND.nextInt())
-                    .add("owned_private_repos", MkOrganizations.RAND.nextInt())
                     .add("followers", MkOrganizations.RAND.nextInt())
                     .add("following", MkOrganizations.RAND.nextInt())
-                    .add("url", "https://github.com/orgs/cat")
-                    .add("repos_url", "https://github.com/orgs/cat/repos")
-                    .add("events_url", "https://github.com/orgs/cat/events")
-                    .add("html_url", "https://github.com/cat")
+                    .add("html_url", "https://github.com/octocat")
                     .add("created_at", new Github.Time().toString())
                     .add("type", "Organization")
                     .build();
diff --git a/src/main/java/com/jcabi/github/mock/MkReleaseAsset.java b/src/main/java/com/jcabi/github/mock/MkReleaseAsset.java
index fc8f75c8..7aff6b55 100644
--- a/src/main/java/com/jcabi/github/mock/MkReleaseAsset.java
+++ b/src/main/java/com/jcabi/github/mock/MkReleaseAsset.java
@@ -156,13 +156,7 @@ final class MkReleaseAsset implements ReleaseAsset {
     @Override
     @NotNull(message = "Input stream is never NULL")
     public InputStream raw() throws IOException {
-        return new ByteArrayInputStream(
-            DatatypeConverter.parseBase64Binary(
-                this.storage.xml().xpath(
-                    String.format("%s/content/text()", this.xpath())
-                ).get(0)
-            )
-        );
+        throw new UnsupportedOperationException("Raw not yet implemented.");
     }
 
     /**
diff --git a/src/main/java/com/jcabi/github/mock/MkRepo.java b/src/main/java/com/jcabi/github/mock/MkRepo.java
index a1e7924e..b7fd115b 100644
--- a/src/main/java/com/jcabi/github/mock/MkRepo.java
+++ b/src/main/java/com/jcabi/github/mock/MkRepo.java
@@ -277,9 +277,4 @@ final class MkRepo implements Repo {
         );
     }
 
-    @Override
-    public int compareTo(final Repo repo) {
-        return this.coords.compareTo(repo.coordinates());
-    }
-
 }
diff --git a/src/main/java/com/jcabi/github/mock/MkRepoCommits.java b/src/main/java/com/jcabi/github/mock/MkRepoCommits.java
index 8f65b54a..fc53e573 100644
--- a/src/main/java/com/jcabi/github/mock/MkRepoCommits.java
+++ b/src/main/java/com/jcabi/github/mock/MkRepoCommits.java
@@ -148,30 +148,7 @@ final class MkRepoCommits implements RepoCommits {
         @NotNull(message = "base shouldn't be NULL") final String base,
         @NotNull(message = "head shouldn't be NULL") final String head
     ) throws IOException {
-        return StringUtils.join(
-            String.format("From %s Mon Sep 17 00:00:00 2001\n", head),
-            "From: Some Author <some_author@email.com>\n",
-            "Date: Tue, 11 Feb 2014 20:33:49 +0200\n",
-            "Subject: Some subject\n", "\n", "---\n",
-            " .../java/com/jcabi/github/CommitsComparison.java   |   6 +-\n",
-            " src/main/java/com/jcabi/github/RepoCommit.java     | 131 +++++",
-            "++++++++++++++++\n",
-            " src/main/java/com/jcabi/github/RepoCommits.java    |  15 +--\n",
-            " src/main/java/com/jcabi/github/RtRepoCommit.java   | 110 +++++",
-            "++++++++++++\n",
-            " src/main/java/com/jcabi/github/RtRepoCommits.java  |   6 +-\n",
-            " .../java/com/jcabi/github/mock/MkRepoCommits.java  |   6 +-\n",
-            " src/test/java/com/jcabi/github/RepoCommitTest.java |  84 +++++",
-            "++++++++\n",
-            " .../java/com/jcabi/github/RtRepoCommitsITCase.java |   7 +-\n",
-            " 8 files changed, 346 insertions(+), 19 deletions(-)\n",
-            " create mode 100644 src/main/java/com/jcabi/github/",
-            "RepoCommit.java\n",
-            " create mode 100644 src/main/java/com/jcabi/github/RtRepoCommit",
-            ".java\n",
-            " create mode 100644 src/test/java/com/jcabi/github/",
-            "RepoCommitTest.java"
-        );
+        throw new UnsupportedOperationException("MkRepoCommits#patch()");
     }
 
     @Override
