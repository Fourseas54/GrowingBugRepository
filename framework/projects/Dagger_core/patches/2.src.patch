diff --git a/core/src/main/java/dagger/ObjectGraph.java b/core/src/main/java/dagger/ObjectGraph.java
index 349213c9..e1225d3d 100644
--- a/core/src/main/java/dagger/ObjectGraph.java
+++ b/core/src/main/java/dagger/ObjectGraph.java
@@ -219,9 +219,8 @@ public final class ObjectGraph {
    */
   public <T> T get(Class<T> type) {
     String key = Keys.get(type);
-    String entryPointKey = Keys.getMembersKey(type);
     @SuppressWarnings("unchecked") // The linker matches keys to bindings by their type.
-    Binding<T> binding = (Binding<T>) getEntryPointBinding(entryPointKey, key);
+    Binding<T> binding = (Binding<T>) getEntryPointBinding(key, key);
     return binding.get();
   }
 
@@ -233,16 +232,17 @@ public final class ObjectGraph {
    *     not one of this object graph's entry point types.
    */
   public void inject(Object instance) {
+    String entryPointKey = Keys.get(instance.getClass());
     String membersKey = Keys.getMembersKey(instance.getClass());
     @SuppressWarnings("unchecked") // The linker matches keys to bindings by their type.
-    Binding<Object> binding = (Binding<Object>) getEntryPointBinding(membersKey, membersKey);
+    Binding<Object> binding = (Binding<Object>) getEntryPointBinding(entryPointKey, membersKey);
     binding.injectMembers(instance);
   }
 
   /**
    * @param entryPointKey the key used to store the entry point. This is always
    *     a members injection key because those keys can always be created, even
    *     if the type has no injectable constructor.
    * @param key the key to use when retrieving the binding. This may be a
    *     regular (provider) key or a members key.
    */
diff --git a/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveModuleAdapter.java b/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveModuleAdapter.java
index b0317bcf..881b0cfe 100644
--- a/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveModuleAdapter.java
+++ b/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveModuleAdapter.java
@@ -37,7 +37,7 @@ final class ReflectiveModuleAdapter extends ModuleAdapter<Object> {
 
   public ReflectiveModuleAdapter(Class<?> moduleClass, Module annotation) {
     super(
-        toMemberKeys(annotation.entryPoints()),
+        toKeys(annotation.entryPoints()),
         annotation.staticInjections(),
         annotation.overrides(),
         annotation.includes(),
@@ -45,10 +45,10 @@ final class ReflectiveModuleAdapter extends ModuleAdapter<Object> {
     this.moduleClass = moduleClass;
   }
 
-  private static String[] toMemberKeys(Class<?>[] entryPoints) {
+  private static String[] toKeys(Class<?>[] entryPoints) {
     String[] result = new String[entryPoints.length];
     for (int i = 0; i < entryPoints.length; i++) {
-      result[i] = Keys.getMembersKey(entryPoints[i]);
+      result[i] = Keys.get(entryPoints[i]);
     }
     return result;
   }
