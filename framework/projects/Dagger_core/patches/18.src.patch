diff --git a/core/src/main/java/dagger/internal/Plugin.java b/core/src/main/java/dagger/internal/Plugin.java
index 24fdf92e..9ef340a4 100644
--- a/core/src/main/java/dagger/internal/Plugin.java
+++ b/core/src/main/java/dagger/internal/Plugin.java
@@ -35,4 +35,4 @@ public interface Plugin {
    * Returns the static injection for {@code injectedClass}.
    */
   StaticInjection getStaticInjection(Class<?> injectedClass);
-}
\ No newline at end of file
+}
diff --git a/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveAtInjectBinding.java b/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveAtInjectBinding.java
index 4fce92c4..a41596a2 100644
--- a/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveAtInjectBinding.java
+++ b/core/src/main/java/dagger/internal/plugins/reflect/ReflectiveAtInjectBinding.java
@@ -173,15 +173,14 @@ final class ReflectiveAtInjectBinding<T> extends Binding<T> {
       injectedConstructor = constructor;
     }
     if (injectedConstructor == null) {
-      if (!injectedFields.isEmpty()) {
-        try {
-          injectedConstructor = type.getDeclaredConstructor();
-        } catch (NoSuchMethodException ignored) {
-        }
-      } else if (mustHaveInjections) {
+      if (injectedFields.isEmpty() && mustHaveInjections) {
         throw new IllegalArgumentException("No injectable members on " + type.getName()
             + ". Do you want to add an injectable constructor?");
       }
+      try {
+        injectedConstructor = type.getDeclaredConstructor();
+      } catch (NoSuchMethodException ignored) {
+      }
     }
 
     int parameterCount;
diff --git a/core/src/main/java/dagger/internal/plugins/reflect/ReflectivePlugin.java b/core/src/main/java/dagger/internal/plugins/reflect/ReflectivePlugin.java
index d5ad9deb..7c64cf9d 100644
--- a/core/src/main/java/dagger/internal/plugins/reflect/ReflectivePlugin.java
+++ b/core/src/main/java/dagger/internal/plugins/reflect/ReflectivePlugin.java
@@ -72,4 +72,4 @@ public final class ReflectivePlugin implements Plugin {
     }
     return new ReflectiveStaticInjection(fields.toArray(new Field[fields.size()]));
   }
-}
\ No newline at end of file
+}
