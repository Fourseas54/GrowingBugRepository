diff --git a/core/src/main/java/dagger/internal/SetBinding.java b/core/src/main/java/dagger/internal/SetBinding.java
index ed0c5f71..202fa5be 100644
--- a/core/src/main/java/dagger/internal/SetBinding.java
+++ b/core/src/main/java/dagger/internal/SetBinding.java
@@ -38,20 +38,17 @@ public final class SetBinding<T> extends Binding<Set<T>> {
     Binding<?> previous = bindings.get(setKey);
     SetBinding<T> setBinding;
     if (previous instanceof SetBinding) {
-      setBinding = (SetBinding<T>) previous;
-      setBinding.setLibrary(setBinding.library() && binding.library());
-      return setBinding;
+      return (SetBinding<T>) previous;
     } else if (previous != null) {
       throw new IllegalArgumentException("Duplicate:\n    " + previous + "\n    " + binding);
     } else {
       setBinding = new SetBinding<T>(setKey, binding.requiredBy);
-      setBinding.setLibrary(binding.library());
       bindings.put(setKey, setBinding);
       return (SetBinding<T>) bindings.get(setKey); // BindingMap.put() copies SetBindings.
     }
   }
 
-  private final Set<Binding<?>> contributors;
+  private final Set<Binding<?>> contributors = new LinkedHashSet<Binding<?>>();
 
   /**
    * Creates a new {@code SetBinding} with the given "provides" key, and the requiredBy object
@@ -59,7 +56,6 @@ public final class SetBinding<T> extends Binding<Set<T>> {
    */
   public SetBinding(String key, Object requiredBy) {
     super(key, null, false, requiredBy);
-    contributors = new LinkedHashSet<Binding<?>>();
   }
 
   /**
@@ -68,9 +64,7 @@ public final class SetBinding<T> extends Binding<Set<T>> {
    */
   public SetBinding(SetBinding<T> original) {
     super(original.provideKey, null, false, original.requiredBy);
-    this.setLibrary(original.library());
-    this.setDependedOn(original.dependedOn());
-    contributors = new LinkedHashSet<Binding<?>>(original.contributors);
+    contributors.addAll(original.contributors);
   }
 
   @Override public void attach(Linker linker) {
