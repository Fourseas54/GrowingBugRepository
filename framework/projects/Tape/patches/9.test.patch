diff --git a/tape/src/test/java/com/squareup/tape/QueueFileTest.java b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
index 289ff47..49bf4b8 100644
--- a/tape/src/test/java/com/squareup/tape/QueueFileTest.java
+++ b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
@@ -1,7 +1,11 @@
 // Copyright 2010 Square, Inc.
 package com.squareup.tape;
 
-import com.squareup.tape.QueueFile.Element;
+import org.fest.assertions.Assertions;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+
 import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -12,11 +16,8 @@ import java.util.LinkedList;
 import java.util.Queue;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
-import org.fest.assertions.Assertions;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
 
+import static com.squareup.tape.QueueFile.Element;
 import static com.squareup.tape.QueueFile.HEADER_LENGTH;
 import static org.fest.assertions.Assertions.assertThat;
 import static org.fest.assertions.Fail.fail;
@@ -128,20 +129,6 @@ public class QueueFileTest {
     assertThat(data).isEqualTo(new byte[firstStuff.length]);
   }
 
-  @Test public void testZeroSizeInHeaderComplains() throws IOException {
-    RandomAccessFile emptyFile = new RandomAccessFile(file, "rwd");
-    emptyFile.setLength(4096);
-    emptyFile.getChannel().force(true);
-    emptyFile.close();
-
-    try {
-      new QueueFile(file);
-      fail("Should have complained about bad header length");
-    } catch (IOException ex) {
-      assertThat(ex).hasMessage("File is corrupt; length stored in header is 0.");
-    }
-  }
-
   @Test public void removeDoesNotCorrupt() throws IOException {
     QueueFile queue = new QueueFile(file);
 
