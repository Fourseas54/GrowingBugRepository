diff --git a/tape/src/test/java/com/squareup/tape/QueueFileTest.java b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
index 24d03f5..0db7520 100644
--- a/tape/src/test/java/com/squareup/tape/QueueFileTest.java
+++ b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
@@ -9,7 +9,6 @@ import java.io.IOException;
 import java.io.InputStream;
 import java.io.RandomAccessFile;
 import java.util.LinkedList;
-import java.util.NoSuchElementException;
 import java.util.Queue;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.logging.Logger;
@@ -126,7 +125,7 @@ import static org.fest.assertions.Fail.fail;
     assertThat(data).isEqualTo(new byte[firstStuff.length]);
   }
 
-  @Test public void testZeroSizeInHeaderThrows() throws IOException {
+  @Test public void testZeroSizeInHeaderComplains() throws IOException {
     RandomAccessFile emptyFile = new RandomAccessFile(file, "rwd");
     emptyFile.setLength(4096);
     emptyFile.getChannel().force(true);
@@ -134,13 +133,13 @@ import static org.fest.assertions.Fail.fail;
 
     try {
       new QueueFile(file);
-      fail("Should have thrown about bad header length");
+      fail("Should have complained about bad header length");
     } catch (IOException ex) {
       assertThat(ex).hasMessage("File is corrupt; length stored in header (0) is invalid.");
     }
   }
 
-  @Test public void testNegativeSizeInHeaderThrows() throws IOException {
+  @Test public void testNegativeSizeInHeaderComplains() throws IOException {
     RandomAccessFile emptyFile = new RandomAccessFile(file, "rwd");
     emptyFile.seek(0);
     emptyFile.writeInt(-2147483648);
@@ -150,7 +149,7 @@ import static org.fest.assertions.Fail.fail;
 
     try {
       new QueueFile(file);
-      fail("Should have thrown about bad header length");
+      fail("Should have complained about bad header length");
     } catch (IOException ex) {
       assertThat(ex) //
           .hasMessage("File is corrupt; length stored in header (-2147483648) is invalid.");
@@ -189,50 +188,6 @@ import static org.fest.assertions.Fail.fail;
     assertThat(queue.peek()).isEqualTo(secondStuff);
   }
 
-  @Test public void removeFromEmptyFileThrows() throws IOException {
-    QueueFile queue = new QueueFile(file);
-
-    try {
-      queue.remove();
-      fail("Should have thrown about removing from empty file.");
-    } catch (NoSuchElementException ignored) {
-    }
-  }
-
-  @Test public void removeNegativeNumberOfElementsThrows() throws IOException {
-    QueueFile queue = new QueueFile(file);
-    queue.add(values[127]);
-
-    try {
-      queue.remove(-1);
-      fail("Should have thrown about removing negative number of elements.");
-    } catch (IllegalArgumentException ex) {
-      assertThat(ex) //
-          .hasMessage("Cannot remove negative (-1) number of elements.");
-    }
-  }
-
-  @Test public void removeZeroElementsDoesNothing() throws IOException {
-    QueueFile queue = new QueueFile(file);
-    queue.add(values[127]);
-
-    queue.remove(0);
-    assertThat(queue.size()).isEqualTo(1);
-  }
-
-  @Test public void removeBeyondQueueSizeElementsThrows() throws IOException {
-    QueueFile queue = new QueueFile(file);
-    queue.add(values[127]);
-
-    try {
-      queue.remove(10);
-      fail("Should have thrown about removing too many elements.");
-    } catch (IllegalArgumentException ex) {
-      assertThat(ex) //
-          .hasMessage("Cannot remove more elements (10) than present in queue (1).");
-    }
-  }
-
   @Test public void removingBigDamnBlocksErasesEffectively() throws IOException {
     byte[] bigBoy = new byte[7000];
     for (int i = 0; i < 7000; i += 100) {
