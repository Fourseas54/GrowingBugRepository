diff --git a/tape/src/test/java/com/squareup/tape/QueueFileTest.java b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
index 3fe2f11..3a811b7 100644
--- a/tape/src/test/java/com/squareup/tape/QueueFileTest.java
+++ b/tape/src/test/java/com/squareup/tape/QueueFileTest.java
@@ -6,7 +6,6 @@ import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.ByteArrayOutputStream;
 import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -299,39 +298,6 @@ public class QueueFileTest {
     assertThat(iteration[0]).isEqualTo(2);
   }
 
-  @Test public void testForEachStreamCopy() throws IOException {
-    final QueueFile queueFile = new QueueFile(file);
-    queueFile.add(new byte[] {1, 2});
-    queueFile.add(new byte[] {3, 4, 5});
-
-    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
-    final byte[] buffer = new byte[8];
-    
-    final QueueFile.ElementReader elementReader = new QueueFile.ElementReader() {
-      @Override public void read(InputStream in, int length) throws IOException {
-        // A common idiom for copying data between two streams, but it depends on the
-        // InputStream correctly returning -1 when no more data is available
-        int count;
-        while ((count = in.read(buffer)) != -1) {
-          if (count == 0) {
-            // In the past, the ElementInputStream.read(byte[], int, int) method would return 0
-            // when no more bytes were available for reading. This test detects that error.
-            //
-            // Note: 0 is a valid return value for InputStream.read(byte[], int, int), which happens
-            // when the passed length is zero. We could trigger that through InputStream.read(byte[])
-            // by passing a zero-length buffer. However, since we won't do that during this test,
-            // we can safely assume that a return value of 0 indicates the past error in logic.
-            fail("This test should never receive a result of 0 from InputStream.read(byte[])");
-          }
-          baos.write(buffer, 0, count);
-        }
-      }
-    };
-
-    queueFile.forEach(elementReader);
-    assertThat(baos.toByteArray()).isEqualTo(new byte[] {1, 2, 3, 4, 5});
-  }
-
   /**
    * Exercise a bug where wrapped elements were getting corrupted when the
    * QueueFile was forced to expand in size and a portion of the final Element
