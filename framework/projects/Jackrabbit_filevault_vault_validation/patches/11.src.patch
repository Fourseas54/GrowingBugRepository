diff --git a/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeNameAndType.java b/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeNameAndType.java
index e71a523b..3ff46de4 100644
--- a/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeNameAndType.java
+++ b/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeNameAndType.java
@@ -45,14 +45,38 @@ final class NodeNameAndType {
     private final @NotNull List<NodeNameAndType> children;
     private final @Nullable NodeNameAndType parent;
 
+    public static NodeNameAndType createUnknownNodeNameAndType(@Nullable NodeNameAndType parent) {
+        return new NodeNameAndType(parent);
+    }
+    private NodeNameAndType(@Nullable NodeNameAndType parent) {
+        this.parent = parent;
+        if (parent != null) {
+            parent.addChild(this);
+        }
+        this.effectiveNodeType = null;
+        children = new LinkedList<>();
+        this.name = null;
+    }
     @SuppressWarnings("null")
     public NodeNameAndType(@Nullable NodeNameAndType parent, @NotNull NameResolver nameResolver, @NotNull EffectiveNodeTypeProvider effectiveNodeTypeProvider, @NotNull DocViewNode node) throws IllegalNameException, NamespaceException, ConstraintViolationException, NoSuchNodeTypeException {
+        try {
         this.name = nameResolver.getQName(node.name);
+        } catch (IllegalNameException|NamespaceException e) {
+            throw new IllegalNameException("Invalid node name " + node.name + ": '" + e.getMessage() + "'", e);
+        }
         Collection<Name> types = new LinkedList<>();
+        try {
         types.add(nameResolver.getQName(node.primary));
+        } catch (IllegalNameException|NamespaceException e) {
+            throw new IllegalNameException("Invalid primary type " + node.primary + ": '" + e.getMessage() + "'", e);
+        }
         if (node.mixins != null) {
             for (String mixin : node.mixins) {
+                try {
                 types.add(nameResolver.getQName(mixin));
+                } catch (IllegalNameException|NamespaceException e) { 
+                    throw new IllegalNameException("Invalid mixin type " + mixin + ": '" + e.getMessage() + "'", e);
+                }
             }
         }
         effectiveNodeType = effectiveNodeTypeProvider.getEffectiveNodeType(types.toArray(new Name[0]));
@@ -63,6 +87,9 @@ final class NodeNameAndType {
         this.parent = parent;
     }
 
+    public boolean isUnknown() {
+        return this.effectiveNodeType == null && this.name == null;
+    }
     public boolean fulfillsNodeDefinition(QNodeDefinition nodeDefinition) {
         // name must match
         if (!nodeDefinition.getName().equals(NameConstants.ANY_NAME) && !nodeDefinition.getName().equals(name)) {
@@ -97,4 +124,10 @@ final class NodeNameAndType {
     public NodeNameAndType getParent() {
         return parent;
     }
-}
\ No newline at end of file
+    @Override
+    public String toString() {
+        return "NodeNameAndType [" + (name != null ? "name=" + name + ", " : "")
+                + (effectiveNodeType != null ? "effectiveNodeType=" + effectiveNodeType + ", " : "")
+                + (children != null ? "children=" + children + ", " : "") + (parent != null ? "parent=" + parent : "") + "]";
+    }
+}
diff --git a/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeTypeValidator.java b/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeTypeValidator.java
index 287f39ab..f84b808e 100644
--- a/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeTypeValidator.java
+++ b/vault-validation/src/main/java/org/apache/jackrabbit/vault/validation/spi/impl/nodetype/NodeTypeValidator.java
@@ -75,7 +75,7 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
 
     static final String MESSAGE_MANDATORY_CHILD_NODE_MISSING = "Mandatory child node missing: %s";
     static final String MESSAGE_PROPERTY_ERROR = "Error while retrieving property '%s': %s";
-    static final String MESSAGE_UNKNOWN_NODE_TYPE_OR_NAMESPACE = "Unknown node type or namespace: %s";
+    static final String MESSAGE_UNKNOWN_NODE_TYPE_OR_NAMESPACE = "%s. Skip validation of nodes with that type";
     static final String MESSAGE_MISSING_PRIMARY_TYPE = "Mandatory jcr:primaryType missing on node '%s'";
     static final String MESSAGE_PROPERTY_NOT_ALLOWED = "Property '%s' is not allowed in node with types '[%s]': %s";
     static final String MESSAGE_MANDATORY_PROPERTY_MISSING = "Mandatory property '%s' missing in node with types [%s]";
@@ -162,11 +162,15 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
                 if (currentNodeNameAndType == null || !filter.contains(parentNodePath)) {
                     parentNodeType = defaultType;
                     useDefaultNodeType = true;
-                } else {
+                } else if (!currentNodeNameAndType.isUnknown()) {
                     parentNodeType = currentNodeNameAndType.getEffectiveNodeType();
                     useDefaultNodeType = false;
+                } else {
+                    parentNodeType = null;
+                    useDefaultNodeType = false;
                 }
 
+                if (parentNodeType != null) {
                 String constraintViolation = getChildNodeConstraintViolation(node, parentNodeType,
                         ntManagerProvider.getNodeTypeDefinitionProvider(),
                         ntManagerProvider.getNameResolver(), ntManagerProvider.getItemDefinitionProvider(),
@@ -180,6 +184,7 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
                                     effectiveNodeTypeToString(ntManagerProvider.getNameResolver(), parentNodeType),
                                     constraintViolation)));
 
+            }
                 }
             }
 
@@ -226,6 +231,7 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
                         String.format(MESSAGE_UNKNOWN_NODE_TYPE_OR_NAMESPACE, e.getMessage()), e));
                 loggedUnknownNodeTypeMessages.add(e.getMessage());
             }
+            currentNodeNameAndType = NodeNameAndType.createUnknownNodeNameAndType(currentNodeNameAndType);
         } catch (RepositoryException e) {
             throw new IllegalStateException("Could not validate nodes/properties against node types: " + e.getMessage(), e);
         }
@@ -241,7 +247,7 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
         }
 
         try {
-            if (currentNodeNameAndType != null) {
+            if (currentNodeNameAndType != null && !currentNodeNameAndType.isUnknown()) {
                 Collection<ValidationMessage> messages = new LinkedList<>();
                 for (QNodeDefinition mandatoryNodeType : currentNodeNameAndType.getEffectiveNodeType().getMandatoryQNodeDefinitions()) {
                     boolean foundRequiredChildNode = currentNodeNameAndType.getChildren().stream()
@@ -260,7 +266,7 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
                 return null;
             }
         } finally {
-            if (currentNodeNameAndType != null) {
+            if (currentNodeNameAndType != null && !isRoot) {
                 currentNodeNameAndType = currentNodeNameAndType.getParent();
             }
         }
@@ -391,8 +397,18 @@ public class NodeTypeValidator implements DocumentViewXmlValidator {
             NodeTypeDefinitionProvider nodeTypeDefinitionProvider,
             NameResolver nameResolver, ItemDefinitionProvider itemDefinitionProvider, boolean allowProtected)
             throws RepositoryException {
-        Name nodeName = nameResolver.getQName(node.name);
-        QNodeTypeDefinition nodeTypeDefinition = nodeTypeDefinitionProvider.getNodeTypeDefinition(nameResolver.getQName(node.primary));
+        final Name nodeName;
+        try {
+            nodeName = nameResolver.getQName(node.name);
+        } catch (IllegalNameException|NamespaceException e) {
+            throw new IllegalNameException("Invalid node name " + node.name+ ": '" + e.getMessage()+ "'", e);
+        }
+        QNodeTypeDefinition nodeTypeDefinition;
+        try {
+            nodeTypeDefinition = nodeTypeDefinitionProvider.getNodeTypeDefinition(nameResolver.getQName(node.primary));
+        } catch (IllegalNameException|NamespaceException e) {
+            throw new IllegalNameException("Invalid primary type " + node.primary + ": '" + e.getMessage() + "'", e);
+        }
         if (nodeTypeDefinition.isAbstract()) {
             return "Not allowed to add node with abstract node type as primary type";
         }
