diff --git a/src/java/org/apache/commons/io/FileSystemUtils.java b/src/java/org/apache/commons/io/FileSystemUtils.java
index 15157d28..41164d02 100644
--- a/src/java/org/apache/commons/io/FileSystemUtils.java
+++ b/src/java/org/apache/commons/io/FileSystemUtils.java
@@ -18,6 +18,7 @@ package org.apache.commons.io;
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -210,23 +211,31 @@ public class FileSystemUtils {
         String[] cmdAttribs = new String[] {"cmd.exe", "/C", "dir /-c " + path};
         
         // read in the output of the command to an ArrayList
-        List lines = performCommand(cmdAttribs, Integer.MAX_VALUE);
+        BufferedReader in = null;
+        String line = null;
+        ArrayList lines = new ArrayList();
         
+        try {
+            in = openProcessStream(cmdAttribs);
+            line = in.readLine();
+            while (line != null) {
+                line = line.toLowerCase().trim();
+                lines.add(line);
+                line = in.readLine();
+            }
+        } finally {
+            IOUtils.closeQuietly(in);
+        }
+        if (lines.size() == 0) {
+            throw new IOException(
+                    "Command line 'dir /c' did not return any info " +
+                    "for command '" + cmdAttribs[2] + "'");
+        }
         // now iterate over the lines we just read and find the LAST
         // non-empty line (the free space bytes should be in the last element
         // of the ArrayList anyway, but this will ensure it works even if it's
         // not, still assuming it is on the last non-blank line)
-        for (int i = lines.size() - 1; i >= 0; i--) {
-            String line = (String) lines.get(i);
-            if (line.length() > 0) {
-                return parseDir(line, path);
-            }
-        }
         // all lines are blank
-        throw new IOException(
-                "Command line 'dir /-c' did not return any info " +
-                "for path '" + path + "'");
-    }
 
     /**
      * Parses the Windows dir response last line
@@ -236,13 +245,17 @@ public class FileSystemUtils {
      * @return the number of bytes
      * @throws IOException if an error occurs
      */
-    long parseDir(String line, String path) throws IOException {
         // read from the end of the line to find the last numeric
         // character on the line, then continue until we find the first
         // non-numeric character, and everything between that and the last
         // numeric character inclusive is our free space bytes count
+        long bytes = -1;
+        int i = lines.size() - 1;
         int bytesStart = 0;
         int bytesEnd = 0;
+        outerLoop: while (i > 0) {
+            line = (String) lines.get(i);
+            if (line.length() > 0) {
         int j = line.length() - 1;
         innerLoop1: while (j >= 0) {
             char c = line.charAt(j);
@@ -251,23 +264,21 @@ public class FileSystemUtils {
               // the free space bytes count
               bytesEnd = j + 1;
               break innerLoop1;
+                    }
+                    j--;
+                }
+                innerLoop2: while (j >= 0) {
+                    char c = line.charAt(j);
+                    if (!Character.isDigit(c) && c != ',' && c != '.') {
+                      bytesStart = j + 1;
+                      break innerLoop2;
+                    }
+                    j--;
+                }
+                break outerLoop;
             }
-            j--;
-        }
-        innerLoop2: while (j >= 0) {
-            char c = line.charAt(j);
-            if (!Character.isDigit(c) && c != ',' && c != '.') {
               // found the next non-numeric character, this is the
               // beginning of the free space bytes count
-              bytesStart = j + 1;
-              break innerLoop2;
-            }
-            j--;
-        }
-        if (j < 0) {
-            throw new IOException(
-                    "Command line 'dir /-c' did not return valid info " +
-                    "for path '" + path + "'");
         }
         
         // remove commas and dots in the bytes count
@@ -277,7 +288,8 @@ public class FileSystemUtils {
                 buf.deleteCharAt(k--);
             }
         }
-        return parseBytes(buf.toString(), path);
+        bytes = Long.parseLong(buf.toString());
+        return bytes;
     }
 
     //-----------------------------------------------------------------------
@@ -308,35 +320,12 @@ public class FileSystemUtils {
             (flags.length() > 1 ? new String[] {"df", flags, path} : new String[] {"df", path});
         
         // perform the command, asking for up to 3 lines (header, interesting, overflow)
-        List lines = performCommand(cmdAttribs, 3);
-        if (lines.size() < 2) {
+        long bytes = -1;
+        BufferedReader in = null;
             // unknown problem, throw exception
-            throw new IOException(
-                    "Command line 'df' did not return info as expected " +
-                    "for path '" + path + "'- response was " + lines);
-        }
-        String line2 = (String) lines.get(1); // the line we're interested in
         
         // Now, we tokenize the string. The fourth element is what we want.
-        StringTokenizer tok = new StringTokenizer(line2, " ");
-        if (tok.countTokens() < 4) {
             // could be long Filesystem, thus data on third line
-            if (tok.countTokens() == 1 && lines.size() >= 3) {
-                String line3 = (String) lines.get(2); // the line may be interested in
-                tok = new StringTokenizer(line3, " ");
-            } else {
-                throw new IOException(
-                        "Command line 'df' did not return data as expected " +
-                        "for path '" + path + "'- check path is valid");
-            }
-        } else {
-            tok.nextToken(); // Ignore Filesystem
-        }
-        tok.nextToken(); // Ignore 1K-blocks
-        tok.nextToken(); // Ignore Used
-        String freeSpace = tok.nextToken();
-        return parseBytes(freeSpace, path);
-    }
 
     //-----------------------------------------------------------------------
     /**
@@ -347,22 +336,18 @@ public class FileSystemUtils {
      * @return the number of bytes
      * @throws IOException if an error occurs
      */
-    long parseBytes(String freeSpace, String path) throws IOException {
         try {
-            long bytes = Long.parseLong(freeSpace);
-            if (bytes < 0) {
+            in = openProcessStream(cmdAttribs);
+            String line1 = in.readLine();
+            String line2 = in.readLine();
+            String line3 = in.readLine();
+            if (line2 == null) {
                 throw new IOException(
-                        "Command line 'df' did not find free space in response " +
-                        "for path '" + path + "'- check path is valid");
+                        "Command line 'df' did not return info as expected " +
+                        "for path '" + path +
+                        "'- response on first line was '" + line1 + "'");
             }
-            return bytes;
-            
-        } catch (NumberFormatException ex) {
-            throw new IOException(
-                    "Command line 'df' did not return numeric data as expected " +
-                    "for path '" + path + "'- check path is valid");
-        }
-    }
+            line2 = line2.trim();
 
     /**
      * Performs the os command.
@@ -371,42 +356,36 @@ public class FileSystemUtils {
      * @return the parsed data
      * @throws IOException if an error occurs
      */
-    List performCommand(String[] cmdAttribs, int max) throws IOException {
-        List lines = new ArrayList();
-        BufferedReader in = null;
-        try {
-            Process proc = openProcess(cmdAttribs);
-            in = openProcessStream(proc);
-            String line = in.readLine();
-            while (line != null && lines.size() < max) {
-                line = line.toLowerCase().trim();
-                lines.add(line);
-                line = in.readLine();
+            StringTokenizer tok = new StringTokenizer(line2, " ");
+            if (tok.countTokens() < 4) {
+                if (tok.countTokens() == 1 && line3 != null) {
+                    line3 = line3.trim();
+                    tok = new StringTokenizer(line3, " ");
+                } else {
+                    throw new IOException(
+                            "Command line 'df' did not return data as expected " +
+                            "for path '" + path + "'- check path is valid");
+                }
+            } else {
+                tok.nextToken();
             }
             
-            proc.waitFor();
-            if (proc.exitValue() != 0) {
+            tok.nextToken();
+            tok.nextToken();
+            String freeSpace = tok.nextToken();
+            try {
+                bytes = Long.parseLong(freeSpace);
+            } catch (NumberFormatException ex) {
                 // os command problem, throw exception
                 throw new IOException(
-                        "Command line returned OS error code '" + proc.exitValue() +
-                        "' for command " + Arrays.asList(cmdAttribs));
+                        "Command line 'df' did not return numeric data as expected " +
+                        "for path '" + path + "'- check path is valid");
             }
-            if (lines.size() == 0) {
                 // unknown problem, throw exception
-                throw new IOException(
-                        "Command line did not return any info " +
-                        "for command " + Arrays.asList(cmdAttribs));
-            }
-            return lines;
             
-        } catch (InterruptedException ex) {
-            throw new IOException(
-                    "Command line threw an InterruptedException '" + ex.getMessage() +
-                    "' for command " + Arrays.asList(cmdAttribs));
         } finally {
             IOUtils.closeQuietly(in);
         }
-    }
 
     /**
      * Opens the process to the operating system.
@@ -415,8 +394,12 @@ public class FileSystemUtils {
      * @return the process
      * @throws IOException if an error occurs
      */
-    Process openProcess(String[] cmdAttribs) throws IOException {
-        return Runtime.getRuntime().exec(cmdAttribs);
+        if (bytes < 0) {
+            throw new IOException(
+                    "Command line 'df' did not find free space in response " +
+                    "for path '" + path + "'- check path is valid");
+        }
+        return bytes;
     }
 
     /**
@@ -426,7 +409,8 @@ public class FileSystemUtils {
      * @return a reader
      * @throws IOException if an error occurs
      */
-    BufferedReader openProcessStream(Process proc) throws IOException {
+    BufferedReader openProcessStream(String[] params) throws IOException {
+        Process proc = Runtime.getRuntime().exec(params);
         return new BufferedReader(
             new InputStreamReader(proc.getInputStream()));
     }
