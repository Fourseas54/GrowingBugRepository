diff --git a/src/main/java/com/jcabi/matchers/RegexMatchers.java b/src/main/java/com/jcabi/matchers/RegexMatchers.java
index befc70c..6b34602 100644
--- a/src/main/java/com/jcabi/matchers/RegexMatchers.java
+++ b/src/main/java/com/jcabi/matchers/RegexMatchers.java
@@ -62,12 +62,11 @@ public final class RegexMatchers {
      *
      * @param pattern The pattern to match against
      * @return Matcher suitable for JUnit/Hamcrest matching
-     * @todo #10 Let's create a convenience method
-     *  matchesAnyPattern(String...patterns) that should pass an assertion if
-     *  a string matches any of the given patterns.
      */
     public static Matcher<String> matchesPattern(final String pattern) {
-        return new RegexMatchingPatternMatcher(pattern);
+        throw new UnsupportedOperationException(
+            "matchesPattern not yet implemented"
+        );
     }
 
     /**
diff --git a/src/main/java/com/jcabi/matchers/RegexMatchingPatternMatcher.java b/src/main/java/com/jcabi/matchers/RegexMatchingPatternMatcher.java
deleted file mode 100644
index c1b3198..0000000
--- a/src/main/java/com/jcabi/matchers/RegexMatchingPatternMatcher.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/**
- * Copyright (c) 2011-2014, jcabi.com
- * All rights reserved.
- *
- * Redistribution and use in source and binary forms, with or without
- * modification, are permitted provided that the following conditions
- * are met: 1) Redistributions of source code must retain the above
- * copyright notice, this list of conditions and the following
- * disclaimer. 2) Redistributions in binary form must reproduce the above
- * copyright notice, this list of conditions and the following
- * disclaimer in the documentation and/or other materials provided
- * with the distribution. 3) Neither the name of the jcabi.com nor
- * the names of its contributors may be used to endorse or promote
- * products derived from this software without specific prior written
- * permission.
- *
- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
- * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT
- * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
- * THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
- * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
- * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
- * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
- * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
- * OF THE POSSIBILITY OF SUCH DAMAGE.
- */
-package com.jcabi.matchers;
-
-import com.jcabi.aspects.Immutable;
-import lombok.EqualsAndHashCode;
-import lombok.ToString;
-import org.hamcrest.Description;
-import org.hamcrest.TypeSafeMatcher;
-
-/**
- * Matcher of Regex patterns against a String, similar to
- * {@link String#matches(String)}.
- * @author Carlos Miranda (miranda.cma@gmail.com)
- * @version $Id$
- * @since 1.3
- */
-@Immutable
-@ToString
-@EqualsAndHashCode(callSuper = false, of = "pattern")
-public final class RegexMatchingPatternMatcher extends TypeSafeMatcher<String> {
-
-    /**
-     * The Regex pattern.
-     */
-    final String pattern;
-
-    /**
-     * Public ctor.
-     * @param regex The regular expression to match against.
-     */
-    public RegexMatchingPatternMatcher(final String regex) {
-        this.pattern = regex;
-    }
-
-    @Override
-    public void describeTo(final Description description) {
-        description.appendText("a String matching the regular expression ")
-            .appendText(this.pattern);
-    }
-
-    @Override
-    protected boolean matchesSafely(final String item) {
-        return item.matches(this.pattern);
-    }
-
-}
